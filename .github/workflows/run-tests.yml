name: tests

on:
  push:
  pull_request_target:
  workflow_dispatch:

env:
  POETRY_VERSION: "1.3.1"

jobs:
  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Update full Python version
      - name: Full Python version
        run: |
          echo "PYTHON_VERSION=$(python -c "import platform; print(platform.python_version())")"
          echo "PYTHON_VERSION=$(python -c "import platform; print(platform.python_version())")" >> $GITHUB_ENV

      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
      - name: Cache Packages
        uses: actions/cache@v3
        if: ${{ !startsWith(runner.os, 'windows') }}
        with:
          path: |
            ~/.local
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Add poetry to windows path
        if: "startsWith(runner.os, 'windows')"
        run: |
          echo "C:\Users\runneradmin\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Display Python version
        run: poetry run python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          poetry install

      - name: Style checking
        if: ${{ matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest' }}
        run: |
          poetry run ruff src tests
          poetry run black --check src tests

      # - name: Type checking
      #   if: ${{ matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest' }}
      #   run: |
      #     poetry run mypy src tests

      - name: Run tests
        run: |
          poetry run coverage run -m unittest
          poetry run coverage report

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request_target' && matrix.os == 'ubuntu-latest' }}
        run: |
          poetry run codecov
